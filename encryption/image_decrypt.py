import cv2 as cv
import numpy as np
import math
 
key

img = cv.imread('encryption/bild_raetsel_xor_1373.png')
# Note that the key length (in bits) is not byte-aligned (not a multiple of 8).
print(img.size)
print(len(key))

#Â Repeat the key as often as necessary to match the image length.
key = key * math.ceil(img.size*8 / len(key))
key_offset = 0

# Process each pixel
for x in range(img.shape[0]):
    for y in range(img.shape[1]):
        # each pixel is three bytes (24 bits), one each per color
        b, g, r = img[x, y]
        # fetch 24 bits of key material
        key_bits = key[key_offset:key_offset + 24]
        # encryption is XOR
        b = int(b) ^ int(key_bits[0:8], 2)
        g = int(g) ^ int(key_bits[8:16], 2)
        r = int(r) ^ int(key_bits[16:24], 2)
        # replace the pixel values
        img[x,y] = b, g, r
        key_offset = key_offset + 24

cv.imshow('image',img)
cv.waitKey()